@using BaseLibrary.DTOs
@using ClientLibrary.Helpers
@using Microsoft.AspNetCore.Components.Authorization
@using ClientLibrary.Services.Interfaces
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop

@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserAccountService accountService
@inject NavigationManager NavManager

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <a class="btn-none text-danger" @onclick="LogoutClicked">Logout</a>
                </Authorized>
                <NotAuthorized>
                    <a class="btn-none" href="identity/account/login">Sign In</a>
                    <a class="btn-none" href="identity/account/login">Register</a>
                </NotAuthorized>
            </AuthorizeView>

            
            
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
     async Task LogoutClicked()
    {
        var logoutModel = new UserSession();
        var customerrAuthStateProvider = (CustomAuthenticationProvider)AuthStateProvider;
        await customerrAuthStateProvider.UpdateAuthenticationState(logoutModel);
        NavManager.NavigateTo("/", forceLoad: true);
    }
}